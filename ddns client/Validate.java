
import java.rmi.NotBoundException;
import java.rmi.Naming;
import java.rmi.RemoteException;

import java.net.MalformedURLException;

import java.io.File;
import java.io.FileOutputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;

import java.awt.Toolkit;
import java.awt.Window;

import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JPasswordField;
import javax.swing.UIManager;
import javax.swing.JOptionPane;

/**
 * This class renders an authentication dialog and validates the user.
 *
 * @author anonymous_02
 */
public class Validate extends javax.swing.JDialog implements java.awt.event.ActionListener {

    private App app;
    private JTextField idText;
    private JLabel loginIDLabel;
    private JLabel passwordLabel;
    private JButton loginButton;
    private JPasswordField passwordText;
    private javax.swing.JCheckBox chkBox;
    private String ipAddr;
    public static Compute compute;
    public static boolean debug;

    /**
     * Creates new form Validate.
     *
     * @param parent
     * @param modal
     * @param ipAddr IP Address of ddnsServer.
     * @param app
     */
    public Validate(java.awt.Frame parent, boolean modal, String ipAddr, App app) {
        super(parent, modal);
        this.app = app;
        this.ipAddr = ipAddr;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        loginIDLabel = new JLabel();
        passwordLabel = new JLabel();
        idText = new JTextField();
        passwordText = new JPasswordField();
        loginButton = new JButton();
        chkBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        loginIDLabel.setText("LogIn ID");
        passwordLabel.setText("Password");

        loginButton.setText("LogIn");
        loginButton.addActionListener(this);

        chkBox.setText("Debug On");
        chkBox.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        /*        layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 332, Short.MAX_VALUE).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(59, 59, 59).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(passwordLabel).addComponent(loginIDLabel)).addGap(32, 32, 32).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(idText).addComponent(passwordText, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))).addGroup(layout.createSequentialGroup().addGap(111, 111, 111).addComponent(loginButton))).addContainerGap(85, Short.MAX_VALUE)));
        layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 203, Short.MAX_VALUE).addGroup(layout.createSequentialGroup().addGap(34, 34, 34).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(loginIDLabel).addComponent(idText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(passwordLabel).addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(39, 39, 39).addComponent(loginButton).addContainerGap(49, Short.MAX_VALUE)));
         */
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(52, 52, 52).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(passwordLabel).addComponent(loginIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(41, 41, 41).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(idText).addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))).addGroup(layout.createSequentialGroup().addGap(111, 111, 111).addComponent(loginButton)).addGroup(layout.createSequentialGroup().addGap(99, 99, 99).addComponent(chkBox, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))).addContainerGap(157, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(38, 38, 38).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(passwordLabel).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(idText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(loginIDLabel)).addGap(26, 26, 26).addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))).addGap(18, 18, 18).addComponent(chkBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18).addComponent(loginButton).addContainerGap(114, Short.MAX_VALUE)));

        setBounds(270, 30, 300, 250);
        setTitle("Client Login");

        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent e) {
                System.exit(0);
            }
        });

        fixLocation();
        setVisible(true);

        pack();
    }// </editor-fold>

    /**
     * Invoked when action is performed.
     *
     * @param evt ActionEvent.
     */
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        loginButtonActionPerformed(evt);
    }

    private void chkBoxItemStateChanged(java.awt.event.ItemEvent evt) {
        // TODO add your handling code here:
        if (chkBox.isSelected()) {
            debug = true;
        } else {
            debug = false;
        }
    }

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        boolean flag = false;
        String[] args = {"hi", "bye"};
        String userid = idText.getText();
        String password = passwordText.getText();
        String server = ipAddr;
        String remoteName = "rmi://" + server + ":1099/ddnsService";

        try {
            CryptoLibrary cl = new CryptoLibrary();
            String euser = cl.encrypt(userid);
            String epass = cl.encrypt(password);

            compute = (Compute) Naming.lookup(remoteName);
            flag = compute.isValidUser(euser, epass);
            System.out.println("value of flag is " + flag);
            if (flag) {
                setVisible(false);
                byte[] filedata = compute.getXMLFile();
                File file = new File("test.xml");
                BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(file.getName()));
                output.write(filedata, 0, filedata.length);
                output.flush();
                output.close();
                args[0] = "test.xml";

                System.out.println("received from server " + args);
                new ClientGUI(app, args[0]);
            } else {
                System.out.println("Invalid user");
                idText.setText("");
                passwordText.setText("");
                javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "invalid username and/or password");
            }
        } catch (NotBoundException ex) {
            ex.printStackTrace();
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        } catch (RemoteException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    /* setVisible(false);
    new ClientGUI(app, "test.xml");
     */
    }

    /**
     * Sets the location of Validate dialog.
     */
    public void fixLocation() {
        Toolkit tk = Toolkit.getDefaultToolkit();

        setLocation((tk.getScreenSize().width - getSize().width) / 2, (tk.getScreenSize().height - getSize().height) / 2);
    }

    /**
     * Sets the location of Validate dialog.
     *
     * @param w Window to be set.
     */
    public static void fixLocation(Window w) {
        Toolkit tk = Toolkit.getDefaultToolkit();

        w.setLocation((tk.getScreenSize().width - w.getSize().width) / 2, (tk.getScreenSize().height - w.getSize().height) / 2);
    }

    /**
     * Loads the {@code LookAndFeel} specified by the given class
     * name, using the current thread's context class loader, and
     * passes it to {@code setLookAndFeel(LookAndFeel)}.
     *
     * @param name  a string specifying the name of the class that implements
     *        the look and feel
     */
    public void setLookAndFeel(String name) {
        if (name == null) {
            return;
        }
        try {
            UIManager.setLookAndFeel(name);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
}